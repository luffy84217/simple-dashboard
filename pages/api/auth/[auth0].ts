import { handleAuth, handleCallback, handleLogin, handleProfile } from '@auth0/nextjs-auth0';

/**
 * @swagger
 * /api/auth/login:
 *   get:
 *     summary: Redirects users to your identity provider for them to log in.
 *     tags:
 *       - auth
 *     responses:
 *       302:
 *         description: Redirects to Location.
 *
 * /api/auth/callback:
 *   get:
 *     summary: Identity provider redirects users to this route after they successfully log in.
 *     tags:
 *       - auth
 *     parameters:
 *       - in: query
 *         name: code_verifier
 *         schema:
 *           type: string
 *         required: true
 *         description: Random value generated by the client (the application making the OAuth request) and used in the OAuth 2.0 authorization code flow with PKCE extension.
 *       - in: query
 *         name: state
 *         schema:
 *           type: string
 *         required: true
 *         description: Value generated by the client and included in the initial OAuth authorization request.
 *       - in: cookie
 *         name: nonce
 *         schema:
 *           type: string
 *         required: true
 *         description: Random value generated by the client and included in the authentication request.
 *       - in: cookie
 *         name: state
 *         schema:
 *           type: string
 *         required: true
 *         description:
 *       - in: cookie
 *         name: code_verifier
 *         schema:
 *           type: string
 *         required: true
 *         description:
 *     responses:
 *       302:
 *         description: Redirects to Location.
 *
 * /api/auth/logout:
 *   get:
 *     summary: Application logs out the user.
 *     tags:
 *       - auth
 *     responses:
 *       302:
 *         description: Redirects to Location.
 *
 * /api/auth/me:
 *   get:
 *     summary: Fetch user profile information in JSON format.
 *     tags:
 *       - auth
 *     responses:
 *       200:
 *         description: OK
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 nickname:
 *                   type: string
 *                   default: example
 *                   description: Preferred nickname or alias of this user.
 *                 name:
 *                   type: string
 *                   default: example
 *                   description: Name of this user.
 *                 picture:
 *                   type: string
 *                   default: https://s.gravatar.com/avatar/378f32e9798b7e52bbe615fc80e3806c?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Flu.png
 *                   description: URL to picture, photo, or avatar of this user.
 *                 updated_at:
 *                   type: string
 *                   default: 2023-07-17T11:52:09.020Z
 *                   description: Date and time when this user was last updated/modified (ISO_8601 format).
 *                 email:
 *                   type: string
 *                   default: examples@gmail.com
 *                   description: Email address of this user.
 *                 email_verified:
 *                   type: boolean
 *                   default: true
 *                   description: Whether this email address is verified (true) or unverified (false).
 *                 sub:
 *                   type: string
 *                   default: auth0|64b51061e6fd28952ae1cdf0
 *                   description: sub
 *                 sid:
 *                   type: string
 *                   default: bNzfHgoR8iHDxnygFy1PJM7GJ4CJheXW
 *                   description: sid
 */

export default handleAuth({
  login: handleLogin({
    authorizationParams: {
      audience: process.env.AUTH0_AUDIENCE,
      scope: 'openid profile email'
    }
  }),
  profile: handleProfile({ refetch: true }),
  callback: async (req, res) => {
    try {
      await handleCallback(req, res);
    } catch (error) {
      res.redirect('/');
    }
  }
});
